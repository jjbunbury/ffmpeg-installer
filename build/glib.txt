[root@localhost glib-2.44.0]# ./configure --help
`configure' configures glib 2.44.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/glib]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --disable-maintainer-mode
                          disable make rules and dependencies not useful (and
                          sometimes confusing) to the casual installer
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-debug=[no/minimum/yes]
                          turn on debugging [default=minimum]
  --enable-gc-friendly    turn on garbage collector friendliness [default=no]
  --disable-mem-pools     disable all glib memory pools
  --disable-rebuilds      disable all source autogeneration rules
  --enable-installed-tests
                          Enable installation of some test cases
  --enable-always-build-tests
                          Enable always building tests during 'make all'
  --disable-largefile     omit support for large files
  --enable-static[=PKGS]  build static libraries [default=no]
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-included-printf
                          use included printf [default=auto]
  --disable-selinux       build without selinux support
  --disable-fam           don't use fam for file system monitoring
  --disable-xattr         build without xattr support
  --disable-libelf        build without libelf support
  --enable-gtk-doc        use gtk-doc to build documentation [[default=no]]
  --enable-gtk-doc-html   build documentation in html format [[default=yes]]
  --enable-gtk-doc-pdf    build documentation in pdf format [[default=no]]
  --enable-man            generate man pages [default=auto]
  --enable-dtrace         include tracing support for dtrace
  --enable-systemtap      include tracing support for systemtap
  --enable-coverage       enable coverage testing with gcov
  --disable-Bsymbolic     avoid linking with -Bsymbolic
  --disable-znodelete     avoid linking with -z,nodelete
  --disable-compile-warnings
                          Don't use builtin compiler warnings

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-runtime-libdir=RELPATH
                          install runtime libraries relative to libdir
  --with-python=PATH      Path to Python interpreter; searches $PATH if only a
                          program name is given; if not given, searches for a
                          few standard names such as "python3" or "python2"
  --with-libiconv=[no/gnu/native]
                          use the libiconv library
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot=DIR Search for dependent libraries within DIR
                        (or the compiler's sysroot if not specified).
  --with-gio-module-dir=DIR
                          load gio modules from this directory
                          [LIBDIR/gio/modules]
  --with-threads=[posix/win32]
                          specify a thread implementation to use
  --with-pcre=[internal/system]
                          whether to use system PCRE [default=internal]
  --with-html-dir=PATH    path to installed docs
  --with-xml-catalog=CATALOG
                          path to xml catalog to use
  --with-tapset-install-dir=DIR
                          path where systemtap tapsets are installed
                          [DATADIR/systemtap/tapset]

Some influential environment variables:
#  CC          C compiler command
#  CFLAGS      C compiler flags
#  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
#              nonstandard directory <lib dir>
#  LIBS        libraries to pass to the linker, e.g. -l<library>
#  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
#              you have headers in a nonstandard directory <include dir>
#  CPP         C preprocessor
#  CXX         C++ compiler command
#  CXXFLAGS    C++ compiler flags
#  PKG_CONFIG  path to pkg-config utility
#  PKG_CONFIG_PATH
#              directories to add to pkg-config's search path
#  PKG_CONFIG_LIBDIR
#              path overriding pkg-config's built-in search path
#  PYTHON      the Python interpreter
#  ZLIB_CFLAGS C compiler flags for ZLIB, overriding pkg-config
#  ZLIB_LIBS   linker flags for ZLIB, overriding pkg-config
#  LIBFFI_CFLAGS
#              C compiler flags for LIBFFI, overriding pkg-config
#  LIBFFI_LIBS linker flags for LIBFFI, overriding pkg-config
#  CXXCPP      C++ preprocessor
#  LIBELF_CFLAGS
#              C compiler flags for LIBELF, overriding pkg-config
#  LIBELF_LIBS linker flags for LIBELF, overriding pkg-config
#  PCRE_CFLAGS C compiler flags for PCRE, overriding pkg-config
#  PCRE_LIBS   linker flags for PCRE, overriding pkg-config
#
#  GTKDOC_DEPS_CFLAGS
#              C compiler flags for GTKDOC_DEPS, overriding pkg-config
#  GTKDOC_DEPS_LIBS
#              linker flags for GTKDOC_DEPS, overriding pkg-config
#  DBUS1_CFLAGS
#              C compiler flags for DBUS1, overriding pkg-config
#  DBUS1_LIBS  linker flags for DBUS1, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <http://bugzilla.gnome.org/enter_bug.cgi?product=glib>.
[root@localhost glib-2.44.0]#
