[root@localhost cairo-1.14.2]# ./configure --help
`configure' configures cairo 1.14.2 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Configuration:
  -h, --help              display this help and exit
      --help=short        display options specific to this package
      --help=recursive    display the short help of all the included packages
  -V, --version           display version information and exit
  -q, --quiet, --silent   do not print `checking ...' messages
      --cache-file=FILE   cache test results in FILE [disabled]
  -C, --config-cache      alias for `--cache-file=config.cache'
  -n, --no-create         do not create output files
      --srcdir=DIR        find the sources in DIR [configure dir or `..']

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

For better control, use the options below.

Fine tuning of the installation directories:
  --bindir=DIR            user executables [EPREFIX/bin]
  --sbindir=DIR           system admin executables [EPREFIX/sbin]
  --libexecdir=DIR        program executables [EPREFIX/libexec]
  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
  --libdir=DIR            object code libraries [EPREFIX/lib]
  --includedir=DIR        C header files [PREFIX/include]
  --oldincludedir=DIR     C header files for non-gcc [/usr/include]
  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]
  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]
  --infodir=DIR           info documentation [DATAROOTDIR/info]
  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]
  --mandir=DIR            man documentation [DATAROOTDIR/man]
  --docdir=DIR            documentation root [DATAROOTDIR/doc/cairo]
  --htmldir=DIR           html documentation [DOCDIR]
  --dvidir=DIR            dvi documentation [DOCDIR]
  --pdfdir=DIR            pdf documentation [DOCDIR]
  --psdir=DIR             ps documentation [DOCDIR]

Program names:
  --program-prefix=PREFIX            prepend PREFIX to installed program names
  --program-suffix=SUFFIX            append SUFFIX to installed program names
  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names

X features:
  --x-includes=DIR    X include files are in DIR
  --x-libraries=DIR   X library files are in DIR

System types:
  --build=BUILD     configure for building on BUILD [guessed]
  --host=HOST       cross-compile to build programs to run on HOST [BUILD]

Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-dependency-tracking
                          do not reject slow dependency extractors
  --disable-dependency-tracking
                          speeds up one-time build
  --enable-silent-rules   less verbose build output (undo: "make V=1")
  --disable-silent-rules  verbose build output (undo: "make V=0")
  --enable-shared[=PKGS]  build shared libraries [default=yes]
  --enable-static[=PKGS]  build static libraries [default=yes]
  --enable-fast-install[=PKGS]
                          optimize for fast installation [default=yes]
  --disable-libtool-lock  avoid locking (might break parallel builds)
  --enable-gtk-doc        use gtk-doc to build documentation [[default=no]]
  --enable-gtk-doc-html   build documentation in html format [[default=yes]]
  --enable-gtk-doc-pdf    build documentation in pdf format [[default=no]]
  --disable-largefile     omit support for large files
  --disable-atomic        disable use of native atomic operations
  --enable-gcov           Enable gcov
  --disable-valgrind      Disable valgrind support
  --enable-xlib=[no/auto/yes]
                          Enable cairo's Xlib surface backend feature
                          [default=auto]
  --enable-xlib-xrender=[no/auto/yes]
                          Enable cairo's Xlib Xrender surface backend feature
                          [default=auto]
  --enable-xcb=[no/auto/yes]
                          Enable cairo's XCB surface backend feature
                          [default=auto]
  --enable-xlib-xcb=[no/auto/yes]
                          Enable cairo's Xlib/XCB functions feature
                          [default=no]
  --enable-xcb-shm=[no/auto/yes]
                          Enable cairo's XCB/SHM functions feature
                          [default=auto]
  --enable-qt=[no/auto/yes]
                          Enable cairo's Qt surface backend feature
                          [default=no]
  --enable-quartz=[no/auto/yes]
                          Enable cairo's Quartz surface backend feature
                          [default=auto]
  --enable-quartz-font=[no/auto/yes]
                          Enable cairo's Quartz font backend feature
                          [default=auto]
  --enable-quartz-image=[no/auto/yes]
                          Enable cairo's Quartz Image surface backend feature
                          [default=no]
  --enable-win32=[no/auto/yes]
                          Enable cairo's Microsoft Windows surface backend
                          feature [default=auto]
  --enable-win32-font=[no/auto/yes]
                          Enable cairo's Microsoft Windows font backend
                          feature [default=auto]
  --enable-skia=[no/auto/yes]
                          Enable cairo's Skia surface backend feature
                          [default=no]
  --enable-os2=[no/auto/yes]
                          Enable cairo's OS/2 surface backend feature
                          [default=no]
  --enable-beos=[no/auto/yes]
                          Enable cairo's BeOS/Zeta surface backend feature
                          [default=no]
  --enable-drm=[no/auto/yes]
                          Enable cairo's DRM surface backend feature
                          [default=no]
  --enable-gallium=[no/auto/yes]
                          Enable cairo's Gallium3D surface backend feature
                          [default=no]
  --enable-png=[no/auto/yes]
                          Enable cairo's PNG functions feature [default=yes]
  --enable-gl=[no/auto/yes]
                          Enable cairo's OpenGL surface backend feature
                          [default=no]
  --enable-glesv2=[no/auto/yes]
                          Enable cairo's OpenGLESv2 surface backend feature
                          [default=no]
  --enable-cogl=[no/auto/yes]
                          Enable cairo's Cogl surface backend feature
                          [default=no]
  --enable-directfb=[no/auto/yes]
                          Enable cairo's directfb surface backend feature
                          [default=no]
  --enable-vg=[no/auto/yes]
                          Enable cairo's OpenVG surface backend feature
                          [default=no]
  --enable-egl=[no/auto/yes]
                          Enable cairo's EGL functions feature [default=auto]
  --enable-glx=[no/auto/yes]
                          Enable cairo's GLX functions feature [default=auto]
  --enable-wgl=[no/auto/yes]
                          Enable cairo's WGL functions feature [default=auto]
  --enable-script=[no/auto/yes]
                          Enable cairo's script surface backend feature
                          [default=yes]
  --enable-ft=[no/auto/yes]
                          Enable cairo's FreeType font backend feature
                          [default=auto]
  --enable-fc=[no/auto/yes]
                          Enable cairo's Fontconfig font backend feature
                          [default=auto]
  --enable-ps=[no/auto/yes]
                          Enable cairo's PostScript surface backend feature
                          [default=yes]
  --enable-pdf=[no/auto/yes]
                          Enable cairo's PDF surface backend feature
                          [default=yes]
  --enable-svg=[no/auto/yes]
                          Enable cairo's SVG surface backend feature
                          [default=yes]
  --enable-test-surfaces=[no/auto/yes]
                          Enable cairo's test surfaces feature [default=no]
  --enable-tee=[no/auto/yes]
                          Enable cairo's tee surface backend feature
                          [default=no]
  --enable-xml=[no/auto/yes]
                          Enable cairo's xml surface backend feature
                          [default=no]
  --enable-pthread=[no/auto/yes]
                          Enable cairo's pthread feature [default=auto]
  --enable-gobject=[no/auto/yes]
                          Enable cairo's gobject functions feature
                          [default=auto]
  --enable-full-testing   Sets the test suite to perform full testing by
                          default, which will dramatically slow down make
                          check, but is a *requirement* before release.
  --enable-trace=[no/auto/yes]
                          Enable cairo's cairo-trace feature [default=auto]
  --enable-interpreter=[no/auto/yes]
                          Enable cairo's cairo-script-interpreter feature
                          [default=yes]
  --enable-symbol-lookup=[no/auto/yes]
                          Enable cairo's symbol-lookup feature [default=auto]
  --disable-some-floating-point
                          Disable certain code paths that rely heavily on
                          double precision floating-point calculation. This
                          option can improve performance on systems without a
                          double precision floating-point unit, but might
                          degrade performance on those that do.

Optional Packages:
  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use
                          both]
  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]
  --with-sysroot=DIR Search for dependent libraries within DIR
                        (or the compiler's sysroot if not specified).
  --with-html-dir=PATH    path to installed docs
  --with-x                use the X Window System
  --with-skia=/path/to/skia
                          directory to find compiled skia sources
  --with-skia-build-type=(Release|Debug)
                              build of skia to link with, default is Release

  --with-gallium=/path/to/mesa
                          directory to find gallium enabled mesa

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  LIBS        libraries to pass to the linker, e.g. -l<library>
  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
              you have headers in a nonstandard directory <include dir>
  CPP         C preprocessor
  PKG_CONFIG  path to pkg-config utility
  
  GTKDOC_DEPS_CFLAGS
              C compiler flags for GTKDOC_DEPS, overriding pkg-config
  GTKDOC_DEPS_LIBS
              linker flags for GTKDOC_DEPS, overriding pkg-config
  CXX         C++ compiler command
  CXXFLAGS    C++ compiler flags
  CXXCPP      C++ preprocessor
  VALGRIND_CFLAGS
              C compiler flags for VALGRIND, overriding pkg-config
  VALGRIND_LIBS
              linker flags for VALGRIND, overriding pkg-config
  xlib_CFLAGS C compiler flags for xlib, overriding pkg-config
  xlib_LIBS   linker flags for xlib, overriding pkg-config
  XMKMF       Path to xmkmf, Makefile generator for X Window System
  xlib_xrender_CFLAGS
              C compiler flags for xlib_xrender, overriding pkg-config
  xlib_xrender_LIBS
              linker flags for xlib_xrender, overriding pkg-config
  xcb_CFLAGS  C compiler flags for xcb, overriding pkg-config
  xcb_LIBS    linker flags for xcb, overriding pkg-config
  xlib_xcb_CFLAGS
              C compiler flags for xlib_xcb, overriding pkg-config
  xlib_xcb_LIBS
              linker flags for xlib_xcb, overriding pkg-config
  xcb_shm_CFLAGS
              C compiler flags for xcb_shm, overriding pkg-config
  xcb_shm_LIBS
              linker flags for xcb_shm, overriding pkg-config
  qt_CFLAGS   C compiler flags for qt, overriding pkg-config
  qt_LIBS     linker flags for qt, overriding pkg-config
  drm_CFLAGS  C compiler flags for drm, overriding pkg-config
  drm_LIBS    linker flags for drm, overriding pkg-config
  png_REQUIRES
              module name for libpng to search for using pkg-config
  png_CFLAGS  C compiler flags for png, overriding pkg-config
  png_LIBS    linker flags for png, overriding pkg-config
  gl_CFLAGS   C compiler flags for gl, overriding pkg-config
  gl_LIBS     linker flags for gl, overriding pkg-config
  glesv2_CFLAGS
              C compiler flags for glesv2, overriding pkg-config
  glesv2_LIBS linker flags for glesv2, overriding pkg-config
  cogl_CFLAGS C compiler flags for cogl, overriding pkg-config
  cogl_LIBS   linker flags for cogl, overriding pkg-config
  directfb_CFLAGS
              C compiler flags for directfb, overriding pkg-config
  directfb_LIBS
              linker flags for directfb, overriding pkg-config
  egl_CFLAGS  C compiler flags for egl, overriding pkg-config
  egl_LIBS    linker flags for egl, overriding pkg-config
  FREETYPE_CFLAGS
              C compiler flags for FREETYPE, overriding pkg-config
  FREETYPE_LIBS
              linker flags for FREETYPE, overriding pkg-config
  FONTCONFIG_CFLAGS
              C compiler flags for FONTCONFIG, overriding pkg-config
  FONTCONFIG_LIBS
              linker flags for FONTCONFIG, overriding pkg-config
  LIBSPECTRE_CFLAGS
              C compiler flags for LIBSPECTRE, overriding pkg-config
  LIBSPECTRE_LIBS
              linker flags for LIBSPECTRE, overriding pkg-config
  POPPLER_CFLAGS
              C compiler flags for POPPLER, overriding pkg-config
  POPPLER_LIBS
              linker flags for POPPLER, overriding pkg-config
  LIBRSVG_CFLAGS
              C compiler flags for LIBRSVG, overriding pkg-config
  LIBRSVG_LIBS
              linker flags for LIBRSVG, overriding pkg-config
  pixman_CFLAGS
              C compiler flags for pixman, overriding pkg-config
  pixman_LIBS linker flags for pixman, overriding pkg-config
  GOBJECT_CFLAGS
              C compiler flags for GOBJECT, overriding pkg-config
  GOBJECT_LIBS
              linker flags for GOBJECT, overriding pkg-config
  glib_CFLAGS C compiler flags for glib, overriding pkg-config
  glib_LIBS   linker flags for glib, overriding pkg-config
  gtk_CFLAGS  C compiler flags for gtk, overriding pkg-config
  gtk_LIBS    linker flags for gtk, overriding pkg-config

Use these variables to override the choices made by `configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <http://bugs.freedesktop.org/enter_bug.cgi?product=cairo>.
cairo home page: <http://cairographics.org/>.
[root@localhost cairo-1.14.2]#
